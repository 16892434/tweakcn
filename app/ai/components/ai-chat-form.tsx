"use client";

import { ResetButton } from "@/components/editor/action-bar/components/reset-button";
import { Loading } from "@/components/loading";
import { Button } from "@/components/ui/button";
import { useAIThemeGeneration } from "@/hooks/use-ai-theme-generation";
import { useEditorStore } from "@/store/editor-store";
import { useThemePresetStore } from "@/store/theme-preset-store";
import { JSONContent } from "@tiptap/react";
import { ArrowUp, Edit, Loader } from "lucide-react";
import dynamic from "next/dynamic";
import { useRouter } from "next/navigation";
import { useState } from "react";
import ThemePresetSelect from "./temp-theme-preset-select";
import { useAuthStore } from "@/store/auth-store";
import { authClient } from "@/lib/auth-client";
import { usePostLoginAction } from "@/hooks/use-post-login-action";
import { toast } from "@/hooks/use-toast";

const CustomTextarea = dynamic(() => import("@/components/editor/custom-textarea"), {
  ssr: false,
  loading: () => <Loading className="min-h-[80px] w-full rounded-lg" />,
});

export function AiChatForm() {
  const [prompt, setPrompt] = useState("");
  const [jsonPrompt, setJsonPrompt] = useState("");
  const {
    themeState,
    setThemeState,
    applyThemePreset,
    saveThemeCheckpoint,
    restoreThemeCheckpoint,
    hasThemeChangedFromCheckpoint,
  } = useEditorStore();
  const presets = useThemePresetStore((state) => state.getAllPresets());

  const { data: session } = authClient.useSession();
  const { openAuthDialog } = useAuthStore();

  usePostLoginAction("AI_GENERATE_FROM_CHAT", ({ prompt, jsonPrompt }) => {
    if (!prompt || !jsonPrompt) {
      toast({
        title: "Error",
        description: "Failed to generate theme. Please try again.",
      });
      return;
    }

    generateTheme(prompt, jsonPrompt);
  });

  const router = useRouter();

  const handlePresetChange = (preset: string) => {
    // Handle preset change logic here
    applyThemePreset(preset);
  };

  const { generateTheme, loading: aiGenerateLoading } = useAIThemeGeneration({
    onSuccess: () => {
      // I tried to save the theme checkpoint here, but then the reset button locks on the
      // theme generated by the AI, and can't go back to the original preset theme.
      // saveThemeCheckpoint();
    },
  });

  const handleOpenInEditor = () => {
    // Check this implementation once the AI flow works
    if (hasThemeChangedFromCheckpoint()) {
      setThemeState({
        ...themeState,
        preset: undefined,
      });
    }
    saveThemeCheckpoint();
    router.push("/editor/theme");
  };

  const handleContentChange = (textContent: string, jsonContent: JSONContent) => {
    setJsonPrompt(JSON.stringify(jsonContent));
    setPrompt(textContent);
  };

  const handleGenerate = () => {
    if (!session) {
      openAuthDialog("signup", "AI_GENERATE_FROM_CHAT", { prompt, jsonPrompt });
      return;
    }

    generateTheme(prompt, jsonPrompt);
  };

  return (
    <div className="bg-background rounded-xl border shadow transition-all">
      <div className="bg-background relative z-10 flex size-full min-h-[100px] flex-1 flex-col overflow-hidden rounded-xl">
        <label className="sr-only">Chat Input</label>
        <div className="min-h-[80px] p-2 pb-0">
          <CustomTextarea onContentChange={handleContentChange} onGenerate={handleGenerate} />
        </div>

        <div className="flex items-center justify-between gap-2 p-2">
          <div className="flex items-center gap-2">
            <ThemePresetSelect
              presets={presets}
              currentPreset={themeState.preset || null}
              onPresetChange={handlePresetChange}
              className="min-h-0 rounded-lg bg-transparent"
              withCycleThemes={false}
            />
            {/* TODO: Undo-Redo buttons */}
            <ResetButton
              onReset={restoreThemeCheckpoint}
              isDisabled={!hasThemeChangedFromCheckpoint()}
            />
          </div>

          <div className="flex items-center gap-2">
            {/* TODO: Add image upload */}
            <Button
              onClick={handleOpenInEditor}
              variant="secondary"
              size="sm"
              disabled={aiGenerateLoading}
            >
              <Edit className="size-4" />
              Open in Editor
            </Button>

            <Button
              size="icon"
              className="size-8"
              onClick={handleGenerate}
              disabled={!prompt || aiGenerateLoading}
            >
              {aiGenerateLoading ? <Loader className="animate-spin" /> : <ArrowUp />}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
